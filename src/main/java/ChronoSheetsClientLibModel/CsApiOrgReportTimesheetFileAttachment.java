/**
 * ChronoSheets API
 * ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.
 *
 * OpenAPI spec version: v1
 * Contact: lachlan@chronosheets.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ChronoSheetsClientLibModel;

import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class CsApiOrgReportTimesheetFileAttachment {
  
  @SerializedName("Username")
  private String username = null;
  @SerializedName("EmailAddress")
  private String emailAddress = null;
  @SerializedName("FirstName")
  private String firstName = null;
  @SerializedName("LastName")
  private String lastName = null;
  @SerializedName("TimesheetStart")
  private Date timesheetStart = null;
  @SerializedName("TimesheetEnd")
  private Date timesheetEnd = null;
  @SerializedName("TimesheetId")
  private Integer timesheetId = null;
  @SerializedName("DocumentS3SignedUrl")
  private String documentS3SignedUrl = null;
  @SerializedName("ImageLargeS3SignedUrl")
  private String imageLargeS3SignedUrl = null;
  @SerializedName("ImageMediumS3SignedUrl")
  private String imageMediumS3SignedUrl = null;
  @SerializedName("ImageSmallS3SignedUrl")
  private String imageSmallS3SignedUrl = null;
  @SerializedName("FileAttachmentId")
  private Integer fileAttachmentId = null;
  @SerializedName("UserId")
  private Integer userId = null;
  @SerializedName("OrgId")
  private Integer orgId = null;
  public enum MobilePlatformEnum {
     0,  1,  2, 
  };
  @SerializedName("MobilePlatform")
  private MobilePlatformEnum mobilePlatform = null;
  public enum AttachmentTypeEnum {
     1,  30,  31,  32,  33,  34,  35,  100, 
  };
  @SerializedName("AttachmentType")
  private AttachmentTypeEnum attachmentType = null;
  @SerializedName("Notes")
  private String notes = null;
  @SerializedName("NonImageFilePath")
  private String nonImageFilePath = null;
  @SerializedName("ImageLargeFilePath")
  private String imageLargeFilePath = null;
  @SerializedName("ImageMediumFilePath")
  private String imageMediumFilePath = null;
  @SerializedName("ImageSmallFilePath")
  private String imageSmallFilePath = null;
  @SerializedName("OriginalFileName")
  private String originalFileName = null;
  @SerializedName("Latitude")
  private Double latitude = null;
  @SerializedName("Longitude")
  private Double longitude = null;
  @SerializedName("DateUploaded")
  private Date dateUploaded = null;
  @SerializedName("DateImageCaptured")
  private Date dateImageCaptured = null;
  @SerializedName("StorageAllocationBytes")
  private Long storageAllocationBytes = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public String getUsername() {
    return username;
  }
  public void setUsername(String username) {
    this.username = username;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getEmailAddress() {
    return emailAddress;
  }
  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getFirstName() {
    return firstName;
  }
  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getLastName() {
    return lastName;
  }
  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Date getTimesheetStart() {
    return timesheetStart;
  }
  public void setTimesheetStart(Date timesheetStart) {
    this.timesheetStart = timesheetStart;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Date getTimesheetEnd() {
    return timesheetEnd;
  }
  public void setTimesheetEnd(Date timesheetEnd) {
    this.timesheetEnd = timesheetEnd;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getTimesheetId() {
    return timesheetId;
  }
  public void setTimesheetId(Integer timesheetId) {
    this.timesheetId = timesheetId;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getDocumentS3SignedUrl() {
    return documentS3SignedUrl;
  }
  public void setDocumentS3SignedUrl(String documentS3SignedUrl) {
    this.documentS3SignedUrl = documentS3SignedUrl;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getImageLargeS3SignedUrl() {
    return imageLargeS3SignedUrl;
  }
  public void setImageLargeS3SignedUrl(String imageLargeS3SignedUrl) {
    this.imageLargeS3SignedUrl = imageLargeS3SignedUrl;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getImageMediumS3SignedUrl() {
    return imageMediumS3SignedUrl;
  }
  public void setImageMediumS3SignedUrl(String imageMediumS3SignedUrl) {
    this.imageMediumS3SignedUrl = imageMediumS3SignedUrl;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getImageSmallS3SignedUrl() {
    return imageSmallS3SignedUrl;
  }
  public void setImageSmallS3SignedUrl(String imageSmallS3SignedUrl) {
    this.imageSmallS3SignedUrl = imageSmallS3SignedUrl;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getFileAttachmentId() {
    return fileAttachmentId;
  }
  public void setFileAttachmentId(Integer fileAttachmentId) {
    this.fileAttachmentId = fileAttachmentId;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getUserId() {
    return userId;
  }
  public void setUserId(Integer userId) {
    this.userId = userId;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getOrgId() {
    return orgId;
  }
  public void setOrgId(Integer orgId) {
    this.orgId = orgId;
  }

  /**
   * 0 = Unknown, 1 = iOS, 2 = Android
   **/
  @ApiModelProperty(value = "0 = Unknown, 1 = iOS, 2 = Android")
  public MobilePlatformEnum getMobilePlatform() {
    return mobilePlatform;
  }
  public void setMobilePlatform(MobilePlatformEnum mobilePlatform) {
    this.mobilePlatform = mobilePlatform;
  }

  /**
   * 1 = Image, 30 = WordDoc, 31 = Pdf, 32 = MSSpreadSheet, 33 = MSPowerPoint, 34 = RichTextFormat, 35 = ZipFile, 100 = Other
   **/
  @ApiModelProperty(value = "1 = Image, 30 = WordDoc, 31 = Pdf, 32 = MSSpreadSheet, 33 = MSPowerPoint, 34 = RichTextFormat, 35 = ZipFile, 100 = Other")
  public AttachmentTypeEnum getAttachmentType() {
    return attachmentType;
  }
  public void setAttachmentType(AttachmentTypeEnum attachmentType) {
    this.attachmentType = attachmentType;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getNotes() {
    return notes;
  }
  public void setNotes(String notes) {
    this.notes = notes;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getNonImageFilePath() {
    return nonImageFilePath;
  }
  public void setNonImageFilePath(String nonImageFilePath) {
    this.nonImageFilePath = nonImageFilePath;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getImageLargeFilePath() {
    return imageLargeFilePath;
  }
  public void setImageLargeFilePath(String imageLargeFilePath) {
    this.imageLargeFilePath = imageLargeFilePath;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getImageMediumFilePath() {
    return imageMediumFilePath;
  }
  public void setImageMediumFilePath(String imageMediumFilePath) {
    this.imageMediumFilePath = imageMediumFilePath;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getImageSmallFilePath() {
    return imageSmallFilePath;
  }
  public void setImageSmallFilePath(String imageSmallFilePath) {
    this.imageSmallFilePath = imageSmallFilePath;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getOriginalFileName() {
    return originalFileName;
  }
  public void setOriginalFileName(String originalFileName) {
    this.originalFileName = originalFileName;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getLatitude() {
    return latitude;
  }
  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getLongitude() {
    return longitude;
  }
  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Date getDateUploaded() {
    return dateUploaded;
  }
  public void setDateUploaded(Date dateUploaded) {
    this.dateUploaded = dateUploaded;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Date getDateImageCaptured() {
    return dateImageCaptured;
  }
  public void setDateImageCaptured(Date dateImageCaptured) {
    this.dateImageCaptured = dateImageCaptured;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Long getStorageAllocationBytes() {
    return storageAllocationBytes;
  }
  public void setStorageAllocationBytes(Long storageAllocationBytes) {
    this.storageAllocationBytes = storageAllocationBytes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CsApiOrgReportTimesheetFileAttachment orgReportTimesheetFileAttachment = (CsApiOrgReportTimesheetFileAttachment) o;
    return (this.username == null ? orgReportTimesheetFileAttachment.username == null : this.username.equals(orgReportTimesheetFileAttachment.username)) &&
        (this.emailAddress == null ? orgReportTimesheetFileAttachment.emailAddress == null : this.emailAddress.equals(orgReportTimesheetFileAttachment.emailAddress)) &&
        (this.firstName == null ? orgReportTimesheetFileAttachment.firstName == null : this.firstName.equals(orgReportTimesheetFileAttachment.firstName)) &&
        (this.lastName == null ? orgReportTimesheetFileAttachment.lastName == null : this.lastName.equals(orgReportTimesheetFileAttachment.lastName)) &&
        (this.timesheetStart == null ? orgReportTimesheetFileAttachment.timesheetStart == null : this.timesheetStart.equals(orgReportTimesheetFileAttachment.timesheetStart)) &&
        (this.timesheetEnd == null ? orgReportTimesheetFileAttachment.timesheetEnd == null : this.timesheetEnd.equals(orgReportTimesheetFileAttachment.timesheetEnd)) &&
        (this.timesheetId == null ? orgReportTimesheetFileAttachment.timesheetId == null : this.timesheetId.equals(orgReportTimesheetFileAttachment.timesheetId)) &&
        (this.documentS3SignedUrl == null ? orgReportTimesheetFileAttachment.documentS3SignedUrl == null : this.documentS3SignedUrl.equals(orgReportTimesheetFileAttachment.documentS3SignedUrl)) &&
        (this.imageLargeS3SignedUrl == null ? orgReportTimesheetFileAttachment.imageLargeS3SignedUrl == null : this.imageLargeS3SignedUrl.equals(orgReportTimesheetFileAttachment.imageLargeS3SignedUrl)) &&
        (this.imageMediumS3SignedUrl == null ? orgReportTimesheetFileAttachment.imageMediumS3SignedUrl == null : this.imageMediumS3SignedUrl.equals(orgReportTimesheetFileAttachment.imageMediumS3SignedUrl)) &&
        (this.imageSmallS3SignedUrl == null ? orgReportTimesheetFileAttachment.imageSmallS3SignedUrl == null : this.imageSmallS3SignedUrl.equals(orgReportTimesheetFileAttachment.imageSmallS3SignedUrl)) &&
        (this.fileAttachmentId == null ? orgReportTimesheetFileAttachment.fileAttachmentId == null : this.fileAttachmentId.equals(orgReportTimesheetFileAttachment.fileAttachmentId)) &&
        (this.userId == null ? orgReportTimesheetFileAttachment.userId == null : this.userId.equals(orgReportTimesheetFileAttachment.userId)) &&
        (this.orgId == null ? orgReportTimesheetFileAttachment.orgId == null : this.orgId.equals(orgReportTimesheetFileAttachment.orgId)) &&
        (this.mobilePlatform == null ? orgReportTimesheetFileAttachment.mobilePlatform == null : this.mobilePlatform.equals(orgReportTimesheetFileAttachment.mobilePlatform)) &&
        (this.attachmentType == null ? orgReportTimesheetFileAttachment.attachmentType == null : this.attachmentType.equals(orgReportTimesheetFileAttachment.attachmentType)) &&
        (this.notes == null ? orgReportTimesheetFileAttachment.notes == null : this.notes.equals(orgReportTimesheetFileAttachment.notes)) &&
        (this.nonImageFilePath == null ? orgReportTimesheetFileAttachment.nonImageFilePath == null : this.nonImageFilePath.equals(orgReportTimesheetFileAttachment.nonImageFilePath)) &&
        (this.imageLargeFilePath == null ? orgReportTimesheetFileAttachment.imageLargeFilePath == null : this.imageLargeFilePath.equals(orgReportTimesheetFileAttachment.imageLargeFilePath)) &&
        (this.imageMediumFilePath == null ? orgReportTimesheetFileAttachment.imageMediumFilePath == null : this.imageMediumFilePath.equals(orgReportTimesheetFileAttachment.imageMediumFilePath)) &&
        (this.imageSmallFilePath == null ? orgReportTimesheetFileAttachment.imageSmallFilePath == null : this.imageSmallFilePath.equals(orgReportTimesheetFileAttachment.imageSmallFilePath)) &&
        (this.originalFileName == null ? orgReportTimesheetFileAttachment.originalFileName == null : this.originalFileName.equals(orgReportTimesheetFileAttachment.originalFileName)) &&
        (this.latitude == null ? orgReportTimesheetFileAttachment.latitude == null : this.latitude.equals(orgReportTimesheetFileAttachment.latitude)) &&
        (this.longitude == null ? orgReportTimesheetFileAttachment.longitude == null : this.longitude.equals(orgReportTimesheetFileAttachment.longitude)) &&
        (this.dateUploaded == null ? orgReportTimesheetFileAttachment.dateUploaded == null : this.dateUploaded.equals(orgReportTimesheetFileAttachment.dateUploaded)) &&
        (this.dateImageCaptured == null ? orgReportTimesheetFileAttachment.dateImageCaptured == null : this.dateImageCaptured.equals(orgReportTimesheetFileAttachment.dateImageCaptured)) &&
        (this.storageAllocationBytes == null ? orgReportTimesheetFileAttachment.storageAllocationBytes == null : this.storageAllocationBytes.equals(orgReportTimesheetFileAttachment.storageAllocationBytes));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.username == null ? 0: this.username.hashCode());
    result = 31 * result + (this.emailAddress == null ? 0: this.emailAddress.hashCode());
    result = 31 * result + (this.firstName == null ? 0: this.firstName.hashCode());
    result = 31 * result + (this.lastName == null ? 0: this.lastName.hashCode());
    result = 31 * result + (this.timesheetStart == null ? 0: this.timesheetStart.hashCode());
    result = 31 * result + (this.timesheetEnd == null ? 0: this.timesheetEnd.hashCode());
    result = 31 * result + (this.timesheetId == null ? 0: this.timesheetId.hashCode());
    result = 31 * result + (this.documentS3SignedUrl == null ? 0: this.documentS3SignedUrl.hashCode());
    result = 31 * result + (this.imageLargeS3SignedUrl == null ? 0: this.imageLargeS3SignedUrl.hashCode());
    result = 31 * result + (this.imageMediumS3SignedUrl == null ? 0: this.imageMediumS3SignedUrl.hashCode());
    result = 31 * result + (this.imageSmallS3SignedUrl == null ? 0: this.imageSmallS3SignedUrl.hashCode());
    result = 31 * result + (this.fileAttachmentId == null ? 0: this.fileAttachmentId.hashCode());
    result = 31 * result + (this.userId == null ? 0: this.userId.hashCode());
    result = 31 * result + (this.orgId == null ? 0: this.orgId.hashCode());
    result = 31 * result + (this.mobilePlatform == null ? 0: this.mobilePlatform.hashCode());
    result = 31 * result + (this.attachmentType == null ? 0: this.attachmentType.hashCode());
    result = 31 * result + (this.notes == null ? 0: this.notes.hashCode());
    result = 31 * result + (this.nonImageFilePath == null ? 0: this.nonImageFilePath.hashCode());
    result = 31 * result + (this.imageLargeFilePath == null ? 0: this.imageLargeFilePath.hashCode());
    result = 31 * result + (this.imageMediumFilePath == null ? 0: this.imageMediumFilePath.hashCode());
    result = 31 * result + (this.imageSmallFilePath == null ? 0: this.imageSmallFilePath.hashCode());
    result = 31 * result + (this.originalFileName == null ? 0: this.originalFileName.hashCode());
    result = 31 * result + (this.latitude == null ? 0: this.latitude.hashCode());
    result = 31 * result + (this.longitude == null ? 0: this.longitude.hashCode());
    result = 31 * result + (this.dateUploaded == null ? 0: this.dateUploaded.hashCode());
    result = 31 * result + (this.dateImageCaptured == null ? 0: this.dateImageCaptured.hashCode());
    result = 31 * result + (this.storageAllocationBytes == null ? 0: this.storageAllocationBytes.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CsApiOrgReportTimesheetFileAttachment {\n");
    
    sb.append("  username: ").append(username).append("\n");
    sb.append("  emailAddress: ").append(emailAddress).append("\n");
    sb.append("  firstName: ").append(firstName).append("\n");
    sb.append("  lastName: ").append(lastName).append("\n");
    sb.append("  timesheetStart: ").append(timesheetStart).append("\n");
    sb.append("  timesheetEnd: ").append(timesheetEnd).append("\n");
    sb.append("  timesheetId: ").append(timesheetId).append("\n");
    sb.append("  documentS3SignedUrl: ").append(documentS3SignedUrl).append("\n");
    sb.append("  imageLargeS3SignedUrl: ").append(imageLargeS3SignedUrl).append("\n");
    sb.append("  imageMediumS3SignedUrl: ").append(imageMediumS3SignedUrl).append("\n");
    sb.append("  imageSmallS3SignedUrl: ").append(imageSmallS3SignedUrl).append("\n");
    sb.append("  fileAttachmentId: ").append(fileAttachmentId).append("\n");
    sb.append("  userId: ").append(userId).append("\n");
    sb.append("  orgId: ").append(orgId).append("\n");
    sb.append("  mobilePlatform: ").append(mobilePlatform).append("\n");
    sb.append("  attachmentType: ").append(attachmentType).append("\n");
    sb.append("  notes: ").append(notes).append("\n");
    sb.append("  nonImageFilePath: ").append(nonImageFilePath).append("\n");
    sb.append("  imageLargeFilePath: ").append(imageLargeFilePath).append("\n");
    sb.append("  imageMediumFilePath: ").append(imageMediumFilePath).append("\n");
    sb.append("  imageSmallFilePath: ").append(imageSmallFilePath).append("\n");
    sb.append("  originalFileName: ").append(originalFileName).append("\n");
    sb.append("  latitude: ").append(latitude).append("\n");
    sb.append("  longitude: ").append(longitude).append("\n");
    sb.append("  dateUploaded: ").append(dateUploaded).append("\n");
    sb.append("  dateImageCaptured: ").append(dateImageCaptured).append("\n");
    sb.append("  storageAllocationBytes: ").append(storageAllocationBytes).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
