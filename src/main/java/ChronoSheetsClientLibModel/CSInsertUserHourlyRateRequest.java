/**
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ChronoSheetsClientLibModel;

import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Fields for inserting a new set of Pay Rates for a user.  Archiving of the previous Pay Rate is done for you automatically
 **/
@ApiModel(description = "Fields for inserting a new set of Pay Rates for a user.  Archiving of the previous Pay Rate is done for you automatically")
public class CSInsertUserHourlyRateRequest {
  
  @SerializedName("UserId")
  private Integer userId = null;
  @SerializedName("HourlyRate")
  private Double hourlyRate = null;
  @SerializedName("HourlyOvertimeRate")
  private Double hourlyOvertimeRate = null;
  @SerializedName("CurrentDate")
  private Date currentDate = null;

  /**
   * The Id of the User that is getting the new set of Pay Rates
   **/
  @ApiModelProperty(value = "The Id of the User that is getting the new set of Pay Rates")
  public Integer getUserId() {
    return userId;
  }
  public void setUserId(Integer userId) {
    this.userId = userId;
  }

  /**
   * The Hourly Rate the employee should receive during their usual rostered hours
   **/
  @ApiModelProperty(value = "The Hourly Rate the employee should receive during their usual rostered hours")
  public Double getHourlyRate() {
    return hourlyRate;
  }
  public void setHourlyRate(Double hourlyRate) {
    this.hourlyRate = hourlyRate;
  }

  /**
   * The Hourly Rate the employee should receive during outside of their usual rostered hours
   **/
  @ApiModelProperty(value = "The Hourly Rate the employee should receive during outside of their usual rostered hours")
  public Double getHourlyOvertimeRate() {
    return hourlyOvertimeRate;
  }
  public void setHourlyOvertimeRate(Double hourlyOvertimeRate) {
    this.hourlyOvertimeRate = hourlyOvertimeRate;
  }

  /**
   * The current date time
   **/
  @ApiModelProperty(value = "The current date time")
  public Date getCurrentDate() {
    return currentDate;
  }
  public void setCurrentDate(Date currentDate) {
    this.currentDate = currentDate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CSInsertUserHourlyRateRequest insertUserHourlyRateRequest = (CSInsertUserHourlyRateRequest) o;
    return (this.userId == null ? insertUserHourlyRateRequest.userId == null : this.userId.equals(insertUserHourlyRateRequest.userId)) &&
        (this.hourlyRate == null ? insertUserHourlyRateRequest.hourlyRate == null : this.hourlyRate.equals(insertUserHourlyRateRequest.hourlyRate)) &&
        (this.hourlyOvertimeRate == null ? insertUserHourlyRateRequest.hourlyOvertimeRate == null : this.hourlyOvertimeRate.equals(insertUserHourlyRateRequest.hourlyOvertimeRate)) &&
        (this.currentDate == null ? insertUserHourlyRateRequest.currentDate == null : this.currentDate.equals(insertUserHourlyRateRequest.currentDate));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.userId == null ? 0: this.userId.hashCode());
    result = 31 * result + (this.hourlyRate == null ? 0: this.hourlyRate.hashCode());
    result = 31 * result + (this.hourlyOvertimeRate == null ? 0: this.hourlyOvertimeRate.hashCode());
    result = 31 * result + (this.currentDate == null ? 0: this.currentDate.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CSInsertUserHourlyRateRequest {\n");
    
    sb.append("  userId: ").append(userId).append("\n");
    sb.append("  hourlyRate: ").append(hourlyRate).append("\n");
    sb.append("  hourlyOvertimeRate: ").append(hourlyOvertimeRate).append("\n");
    sb.append("  currentDate: ").append(currentDate).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
