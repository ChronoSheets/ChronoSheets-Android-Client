/**
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ChronoSheetsClientLibModel;

import ChronoSheetsClientLibModel.CSUsualHoursDay;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * An object that can be used to set the Usual Hours (Rostered Hours) of an employee user account
 **/
@ApiModel(description = "An object that can be used to set the Usual Hours (Rostered Hours) of an employee user account")
public class CSSetUsualHoursRequest {
  
  @SerializedName("UsualHoursData")
  private List<CSUsualHoursDay> usualHoursData = null;
  @SerializedName("UserId")
  private Integer userId = null;

  /**
   * A Collection of days (Mon-Sun) with updated Roster timeslots
   **/
  @ApiModelProperty(value = "A Collection of days (Mon-Sun) with updated Roster timeslots")
  public List<CSUsualHoursDay> getUsualHoursData() {
    return usualHoursData;
  }
  public void setUsualHoursData(List<CSUsualHoursDay> usualHoursData) {
    this.usualHoursData = usualHoursData;
  }

  /**
   * The Id of the User that these updated Rostered Hours will be applied to
   **/
  @ApiModelProperty(value = "The Id of the User that these updated Rostered Hours will be applied to")
  public Integer getUserId() {
    return userId;
  }
  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CSSetUsualHoursRequest setUsualHoursRequest = (CSSetUsualHoursRequest) o;
    return (this.usualHoursData == null ? setUsualHoursRequest.usualHoursData == null : this.usualHoursData.equals(setUsualHoursRequest.usualHoursData)) &&
        (this.userId == null ? setUsualHoursRequest.userId == null : this.userId.equals(setUsualHoursRequest.userId));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.usualHoursData == null ? 0: this.usualHoursData.hashCode());
    result = 31 * result + (this.userId == null ? 0: this.userId.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CSSetUsualHoursRequest {\n");
    
    sb.append("  usualHoursData: ").append(usualHoursData).append("\n");
    sb.append("  userId: ").append(userId).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
