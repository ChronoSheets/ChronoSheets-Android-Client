/**
 * ChronoSheets API
 * ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.
 *
 * OpenAPI spec version: v1
 * Contact: lachlan@chronosheets.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ChronoSheetsClientLibApi;

import ChronoSheetsClient.ApiInvoker;
import ChronoSheetsClient.ApiException;
import ChronoSheetsClient.Pair;

import ChronoSheetsClientLibModel.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import ChronoSheetsClientLibModel.CSApiResponseForPaginatedListTrip;
import ChronoSheetsClientLibModel.CSApiResponseInt32;
import ChronoSheetsClientLibModel.CSApiResponseTrip;
import ChronoSheetsClientLibModel.CSCreateTripRequest;
import java.util.Date;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TripsApi {
  String basePath = "https://www.chronosheets.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new trip.  Important: create a timesheet record before calling this, passing in the new timesheet record id as a reference.    Requires the &#39;SubmitTimesheets&#39; permission.
  * 
   * @param request A Create Trip Request object containing values for the new Trip to create
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CSApiResponseInt32
  */
  public CSApiResponseInt32 tripsCreateTrip (CSCreateTripRequest request, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = request;
    // verify the required parameter 'request' is set
    if (request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'request' when calling tripsCreateTrip",
        new ApiException(400, "Missing the required parameter 'request' when calling tripsCreateTrip"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling tripsCreateTrip",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling tripsCreateTrip"));
    }

    // create path and map variables
    String path = "/api/Trips/CreateTrip";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded",
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CSApiResponseInt32) ApiInvoker.deserialize(localVarResponse, "", CSApiResponseInt32.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new trip.  Important: create a timesheet record before calling this, passing in the new timesheet record id as a reference.    Requires the &#39;SubmitTimesheets&#39; permission.
   * 
   * @param request A Create Trip Request object containing values for the new Trip to create   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void tripsCreateTrip (CSCreateTripRequest request, String xChronosheetsAuth, final Response.Listener<CSApiResponseInt32> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = request;

    // verify the required parameter 'request' is set
    if (request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'request' when calling tripsCreateTrip",
        new ApiException(400, "Missing the required parameter 'request' when calling tripsCreateTrip"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling tripsCreateTrip",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling tripsCreateTrip"));
    }

    // create path and map variables
    String path = "/api/Trips/CreateTrip".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded","multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CSApiResponseInt32) ApiInvoker.deserialize(localVarResponse,  "", CSApiResponseInt32.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get trip by Id.    Requires the &#39;ViewMyTrips&#39; permission.
  * 
   * @param tripId The ID of the Trip you want to get
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CSApiResponseTrip
  */
  public CSApiResponseTrip tripsGetMyTripById (Integer tripId, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'tripId' is set
    if (tripId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tripId' when calling tripsGetMyTripById",
        new ApiException(400, "Missing the required parameter 'tripId' when calling tripsGetMyTripById"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling tripsGetMyTripById",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling tripsGetMyTripById"));
    }

    // create path and map variables
    String path = "/api/Trips/GetMyTripById";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "TripId", tripId));
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CSApiResponseTrip) ApiInvoker.deserialize(localVarResponse, "", CSApiResponseTrip.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get trip by Id.    Requires the &#39;ViewMyTrips&#39; permission.
   * 
   * @param tripId The ID of the Trip you want to get   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void tripsGetMyTripById (Integer tripId, String xChronosheetsAuth, final Response.Listener<CSApiResponseTrip> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'tripId' is set
    if (tripId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tripId' when calling tripsGetMyTripById",
        new ApiException(400, "Missing the required parameter 'tripId' when calling tripsGetMyTripById"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling tripsGetMyTripById",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling tripsGetMyTripById"));
    }

    // create path and map variables
    String path = "/api/Trips/GetMyTripById".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "TripId", tripId));

    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CSApiResponseTrip) ApiInvoker.deserialize(localVarResponse,  "", CSApiResponseTrip.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get my trips.  Get the GPS trips you&#39;ve recorded and submitted.    Requires the &#39;ViewMyTrips&#39; permission.
  * 
   * @param startDate The Start date of the date range.  Trips after this date will be obtained.
   * @param endDate The End date of the date range.  Trips before this date will be obtained.
   * @param skip Skip this many Trips
   * @param take Take this many Trips
   * @param vehicleId Filter by a particular Vehicle (get trips made with a particular vehicle), specified by VehicleId
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CSApiResponseForPaginatedListTrip
  */
  public CSApiResponseForPaginatedListTrip tripsGetMyTrips (Date startDate, Date endDate, Integer skip, Integer take, Integer vehicleId, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling tripsGetMyTrips",
        new ApiException(400, "Missing the required parameter 'startDate' when calling tripsGetMyTrips"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling tripsGetMyTrips",
        new ApiException(400, "Missing the required parameter 'endDate' when calling tripsGetMyTrips"));
    }
    // verify the required parameter 'skip' is set
    if (skip == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'skip' when calling tripsGetMyTrips",
        new ApiException(400, "Missing the required parameter 'skip' when calling tripsGetMyTrips"));
    }
    // verify the required parameter 'take' is set
    if (take == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'take' when calling tripsGetMyTrips",
        new ApiException(400, "Missing the required parameter 'take' when calling tripsGetMyTrips"));
    }
    // verify the required parameter 'vehicleId' is set
    if (vehicleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vehicleId' when calling tripsGetMyTrips",
        new ApiException(400, "Missing the required parameter 'vehicleId' when calling tripsGetMyTrips"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling tripsGetMyTrips",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling tripsGetMyTrips"));
    }

    // create path and map variables
    String path = "/api/Trips/GetMyTrips";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Skip", skip));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Take", take));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "VehicleId", vehicleId));
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CSApiResponseForPaginatedListTrip) ApiInvoker.deserialize(localVarResponse, "", CSApiResponseForPaginatedListTrip.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get my trips.  Get the GPS trips you&#39;ve recorded and submitted.    Requires the &#39;ViewMyTrips&#39; permission.
   * 
   * @param startDate The Start date of the date range.  Trips after this date will be obtained.   * @param endDate The End date of the date range.  Trips before this date will be obtained.   * @param skip Skip this many Trips   * @param take Take this many Trips   * @param vehicleId Filter by a particular Vehicle (get trips made with a particular vehicle), specified by VehicleId   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void tripsGetMyTrips (Date startDate, Date endDate, Integer skip, Integer take, Integer vehicleId, String xChronosheetsAuth, final Response.Listener<CSApiResponseForPaginatedListTrip> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling tripsGetMyTrips",
        new ApiException(400, "Missing the required parameter 'startDate' when calling tripsGetMyTrips"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling tripsGetMyTrips",
        new ApiException(400, "Missing the required parameter 'endDate' when calling tripsGetMyTrips"));
    }
    // verify the required parameter 'skip' is set
    if (skip == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'skip' when calling tripsGetMyTrips",
        new ApiException(400, "Missing the required parameter 'skip' when calling tripsGetMyTrips"));
    }
    // verify the required parameter 'take' is set
    if (take == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'take' when calling tripsGetMyTrips",
        new ApiException(400, "Missing the required parameter 'take' when calling tripsGetMyTrips"));
    }
    // verify the required parameter 'vehicleId' is set
    if (vehicleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vehicleId' when calling tripsGetMyTrips",
        new ApiException(400, "Missing the required parameter 'vehicleId' when calling tripsGetMyTrips"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling tripsGetMyTrips",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling tripsGetMyTrips"));
    }

    // create path and map variables
    String path = "/api/Trips/GetMyTrips".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Skip", skip));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Take", take));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "VehicleId", vehicleId));

    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CSApiResponseForPaginatedListTrip) ApiInvoker.deserialize(localVarResponse,  "", CSApiResponseForPaginatedListTrip.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
