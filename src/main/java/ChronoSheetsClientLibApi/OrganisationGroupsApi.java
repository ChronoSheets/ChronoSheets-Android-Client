/**
 * ChronoSheets API
 * An API for integrating into ChronoSheets timesheets
 *
 * OpenAPI spec version: v1
 * Contact: lachlan@chronosheets.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ChronoSheetsClientLibApi;

import ChronoSheetsClient.ApiInvoker;
import ChronoSheetsClient.ApiException;
import ChronoSheetsClient.Pair;

import ChronoSheetsClientLibModel.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import ChronoSheetsClientLibModel.CsApiApiResponseBoolean;
import ChronoSheetsClientLibModel.CsApiApiResponseInt32;
import ChronoSheetsClientLibModel.CsApiApiResponseListOrganisationGroup;
import ChronoSheetsClientLibModel.CsApiApiResponseOrganisationGroup;
import ChronoSheetsClientLibModel.CsApiInsertOrganisationGroupRequest;
import ChronoSheetsClientLibModel.CsApiSaveOrganisationGroupRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class OrganisationGroupsApi {
  String basePath = "https://www.chronosheets.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create an organisation group
  * 
   * @param request 
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CsApiApiResponseInt32
  */
  public CsApiApiResponseInt32 organisationGroupsCreateOrganisationGroup (CsApiInsertOrganisationGroupRequest request, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = request;
    // verify the required parameter 'request' is set
    if (request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'request' when calling organisationGroupsCreateOrganisationGroup",
        new ApiException(400, "Missing the required parameter 'request' when calling organisationGroupsCreateOrganisationGroup"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsCreateOrganisationGroup",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsCreateOrganisationGroup"));
    }

    // create path and map variables
    String path = "/api/OrganisationGroups/CreateOrganisationGroup";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded",
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CsApiApiResponseInt32) ApiInvoker.deserialize(localVarResponse, "", CsApiApiResponseInt32.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create an organisation group
   * 
   * @param request    * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void organisationGroupsCreateOrganisationGroup (CsApiInsertOrganisationGroupRequest request, String xChronosheetsAuth, final Response.Listener<CsApiApiResponseInt32> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = request;

    // verify the required parameter 'request' is set
    if (request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'request' when calling organisationGroupsCreateOrganisationGroup",
        new ApiException(400, "Missing the required parameter 'request' when calling organisationGroupsCreateOrganisationGroup"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsCreateOrganisationGroup",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsCreateOrganisationGroup"));
    }

    // create path and map variables
    String path = "/api/OrganisationGroups/CreateOrganisationGroup".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded","multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CsApiApiResponseInt32) ApiInvoker.deserialize(localVarResponse,  "", CsApiApiResponseInt32.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a particular organisation group
  * 
   * @param organisationGroupId The ID of the organisation group you want to get
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CsApiApiResponseOrganisationGroup
  */
  public CsApiApiResponseOrganisationGroup organisationGroupsGetOrganisationGroup (Integer organisationGroupId, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organisationGroupId' is set
    if (organisationGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisationGroupId' when calling organisationGroupsGetOrganisationGroup",
        new ApiException(400, "Missing the required parameter 'organisationGroupId' when calling organisationGroupsGetOrganisationGroup"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroup",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroup"));
    }

    // create path and map variables
    String path = "/api/OrganisationGroups/GetOrganisationGroup";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "OrganisationGroupId", organisationGroupId));
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CsApiApiResponseOrganisationGroup) ApiInvoker.deserialize(localVarResponse, "", CsApiApiResponseOrganisationGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a particular organisation group
   * 
   * @param organisationGroupId The ID of the organisation group you want to get   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void organisationGroupsGetOrganisationGroup (Integer organisationGroupId, String xChronosheetsAuth, final Response.Listener<CsApiApiResponseOrganisationGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organisationGroupId' is set
    if (organisationGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisationGroupId' when calling organisationGroupsGetOrganisationGroup",
        new ApiException(400, "Missing the required parameter 'organisationGroupId' when calling organisationGroupsGetOrganisationGroup"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroup",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroup"));
    }

    // create path and map variables
    String path = "/api/OrganisationGroups/GetOrganisationGroup".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "OrganisationGroupId", organisationGroupId));

    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CsApiApiResponseOrganisationGroup) ApiInvoker.deserialize(localVarResponse,  "", CsApiApiResponseOrganisationGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a collection of organisation groups that are under your organisation
  * 
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CsApiApiResponseListOrganisationGroup
  */
  public CsApiApiResponseListOrganisationGroup organisationGroupsGetOrganisationGroups (String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroups",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroups"));
    }

    // create path and map variables
    String path = "/api/OrganisationGroups/GetOrganisationGroups";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CsApiApiResponseListOrganisationGroup) ApiInvoker.deserialize(localVarResponse, "", CsApiApiResponseListOrganisationGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a collection of organisation groups that are under your organisation
   * 
   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void organisationGroupsGetOrganisationGroups (String xChronosheetsAuth, final Response.Listener<CsApiApiResponseListOrganisationGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroups",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroups"));
    }

    // create path and map variables
    String path = "/api/OrganisationGroups/GetOrganisationGroups".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CsApiApiResponseListOrganisationGroup) ApiInvoker.deserialize(localVarResponse,  "", CsApiApiResponseListOrganisationGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get org groups for a particular job
  * 
   * @param jobId The ID of the job
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CsApiApiResponseListOrganisationGroup
  */
  public CsApiApiResponseListOrganisationGroup organisationGroupsGetOrganisationGroupsForJob (Integer jobId, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling organisationGroupsGetOrganisationGroupsForJob",
        new ApiException(400, "Missing the required parameter 'jobId' when calling organisationGroupsGetOrganisationGroupsForJob"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroupsForJob",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroupsForJob"));
    }

    // create path and map variables
    String path = "/api/OrganisationGroups/GetOrganisationGroupsForJob";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "JobId", jobId));
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CsApiApiResponseListOrganisationGroup) ApiInvoker.deserialize(localVarResponse, "", CsApiApiResponseListOrganisationGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get org groups for a particular job
   * 
   * @param jobId The ID of the job   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void organisationGroupsGetOrganisationGroupsForJob (Integer jobId, String xChronosheetsAuth, final Response.Listener<CsApiApiResponseListOrganisationGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling organisationGroupsGetOrganisationGroupsForJob",
        new ApiException(400, "Missing the required parameter 'jobId' when calling organisationGroupsGetOrganisationGroupsForJob"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroupsForJob",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroupsForJob"));
    }

    // create path and map variables
    String path = "/api/OrganisationGroups/GetOrganisationGroupsForJob".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "JobId", jobId));

    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CsApiApiResponseListOrganisationGroup) ApiInvoker.deserialize(localVarResponse,  "", CsApiApiResponseListOrganisationGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get org groups for a particular vehicle
  * 
   * @param vehicleId The ID of the vehicle
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CsApiApiResponseListOrganisationGroup
  */
  public CsApiApiResponseListOrganisationGroup organisationGroupsGetOrganisationGroupsForVehicle (Integer vehicleId, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'vehicleId' is set
    if (vehicleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vehicleId' when calling organisationGroupsGetOrganisationGroupsForVehicle",
        new ApiException(400, "Missing the required parameter 'vehicleId' when calling organisationGroupsGetOrganisationGroupsForVehicle"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroupsForVehicle",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroupsForVehicle"));
    }

    // create path and map variables
    String path = "/api/OrganisationGroups/GetOrganisationGroupsForVehicle";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "VehicleId", vehicleId));
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CsApiApiResponseListOrganisationGroup) ApiInvoker.deserialize(localVarResponse, "", CsApiApiResponseListOrganisationGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get org groups for a particular vehicle
   * 
   * @param vehicleId The ID of the vehicle   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void organisationGroupsGetOrganisationGroupsForVehicle (Integer vehicleId, String xChronosheetsAuth, final Response.Listener<CsApiApiResponseListOrganisationGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'vehicleId' is set
    if (vehicleId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vehicleId' when calling organisationGroupsGetOrganisationGroupsForVehicle",
        new ApiException(400, "Missing the required parameter 'vehicleId' when calling organisationGroupsGetOrganisationGroupsForVehicle"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroupsForVehicle",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsGetOrganisationGroupsForVehicle"));
    }

    // create path and map variables
    String path = "/api/OrganisationGroups/GetOrganisationGroupsForVehicle".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "VehicleId", vehicleId));

    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CsApiApiResponseListOrganisationGroup) ApiInvoker.deserialize(localVarResponse,  "", CsApiApiResponseListOrganisationGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update an organisation group
  * 
   * @param request 
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CsApiApiResponseBoolean
  */
  public CsApiApiResponseBoolean organisationGroupsUpdateOrganisationGroup (CsApiSaveOrganisationGroupRequest request, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = request;
    // verify the required parameter 'request' is set
    if (request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'request' when calling organisationGroupsUpdateOrganisationGroup",
        new ApiException(400, "Missing the required parameter 'request' when calling organisationGroupsUpdateOrganisationGroup"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsUpdateOrganisationGroup",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsUpdateOrganisationGroup"));
    }

    // create path and map variables
    String path = "/api/OrganisationGroups/UpdateOrganisationGroup";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded",
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CsApiApiResponseBoolean) ApiInvoker.deserialize(localVarResponse, "", CsApiApiResponseBoolean.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update an organisation group
   * 
   * @param request    * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void organisationGroupsUpdateOrganisationGroup (CsApiSaveOrganisationGroupRequest request, String xChronosheetsAuth, final Response.Listener<CsApiApiResponseBoolean> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = request;

    // verify the required parameter 'request' is set
    if (request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'request' when calling organisationGroupsUpdateOrganisationGroup",
        new ApiException(400, "Missing the required parameter 'request' when calling organisationGroupsUpdateOrganisationGroup"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsUpdateOrganisationGroup",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling organisationGroupsUpdateOrganisationGroup"));
    }

    // create path and map variables
    String path = "/api/OrganisationGroups/UpdateOrganisationGroup".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded","multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CsApiApiResponseBoolean) ApiInvoker.deserialize(localVarResponse,  "", CsApiApiResponseBoolean.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
