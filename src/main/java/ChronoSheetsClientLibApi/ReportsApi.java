/**
 * ChronoSheets API
 * ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.
 *
 * OpenAPI spec version: v1
 * Contact: lachlan@chronosheets.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ChronoSheetsClientLibApi;

import ChronoSheetsClient.ApiInvoker;
import ChronoSheetsClient.ApiException;
import ChronoSheetsClient.Pair;

import ChronoSheetsClientLibModel.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import ChronoSheetsClientLibModel.CSApiResponseCombinedReportsData;
import ChronoSheetsClientLibModel.CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment;
import ChronoSheetsClientLibModel.CSApiResponseForPaginatedListOrgReportTrip;
import ChronoSheetsClientLibModel.CSApiResponseForPaginatedListRawReportItem;
import ChronoSheetsClientLibModel.CSApiResponseListJobSeriesReportItem;
import ChronoSheetsClientLibModel.CSApiResponseListProjectCostingReportItem;
import ChronoSheetsClientLibModel.CSApiResponseTrip;
import java.util.Date;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ReportsApi {
  String basePath = "https://www.chronosheets.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.  Requires the &#39;ReportAdmin&#39; permission.
  * 
   * @param startDate The start date for the date range.  Report data in the response is after this date
   * @param endDate The end date for the date range.  Report data in the response is before this date
   * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CSApiResponseCombinedReportsData
  */
  public CSApiResponseCombinedReportsData reportsGetAllChartsDataAdmin (Date startDate, Date endDate, String userIds, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsGetAllChartsDataAdmin",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsGetAllChartsDataAdmin"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsGetAllChartsDataAdmin",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsGetAllChartsDataAdmin"));
    }
    // verify the required parameter 'userIds' is set
    if (userIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userIds' when calling reportsGetAllChartsDataAdmin",
        new ApiException(400, "Missing the required parameter 'userIds' when calling reportsGetAllChartsDataAdmin"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataAdmin",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataAdmin"));
    }

    // create path and map variables
    String path = "/api/Reports/GetAllChartsDataAdmin";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "UserIds", userIds));
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CSApiResponseCombinedReportsData) ApiInvoker.deserialize(localVarResponse, "", CSApiResponseCombinedReportsData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.  Requires the &#39;ReportAdmin&#39; permission.
   * 
   * @param startDate The start date for the date range.  Report data in the response is after this date   * @param endDate The end date for the date range.  Report data in the response is before this date   * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void reportsGetAllChartsDataAdmin (Date startDate, Date endDate, String userIds, String xChronosheetsAuth, final Response.Listener<CSApiResponseCombinedReportsData> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsGetAllChartsDataAdmin",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsGetAllChartsDataAdmin"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsGetAllChartsDataAdmin",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsGetAllChartsDataAdmin"));
    }
    // verify the required parameter 'userIds' is set
    if (userIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userIds' when calling reportsGetAllChartsDataAdmin",
        new ApiException(400, "Missing the required parameter 'userIds' when calling reportsGetAllChartsDataAdmin"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataAdmin",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataAdmin"));
    }

    // create path and map variables
    String path = "/api/Reports/GetAllChartsDataAdmin".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "UserIds", userIds));

    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CSApiResponseCombinedReportsData) ApiInvoker.deserialize(localVarResponse,  "", CSApiResponseCombinedReportsData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.  Requires the &#39;ViewOwnReports&#39; permission.
  * 
   * @param startDate The start date for the date range.  Report data in the response is after this date
   * @param endDate The end date for the date range.  Report data in the response is before this date
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CSApiResponseCombinedReportsData
  */
  public CSApiResponseCombinedReportsData reportsGetAllChartsDataUser (Date startDate, Date endDate, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsGetAllChartsDataUser",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsGetAllChartsDataUser"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsGetAllChartsDataUser",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsGetAllChartsDataUser"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataUser",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataUser"));
    }

    // create path and map variables
    String path = "/api/Reports/GetAllChartsDataUser";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CSApiResponseCombinedReportsData) ApiInvoker.deserialize(localVarResponse, "", CSApiResponseCombinedReportsData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.  Requires the &#39;ViewOwnReports&#39; permission.
   * 
   * @param startDate The start date for the date range.  Report data in the response is after this date   * @param endDate The end date for the date range.  Report data in the response is before this date   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void reportsGetAllChartsDataUser (Date startDate, Date endDate, String xChronosheetsAuth, final Response.Listener<CSApiResponseCombinedReportsData> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsGetAllChartsDataUser",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsGetAllChartsDataUser"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsGetAllChartsDataUser",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsGetAllChartsDataUser"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataUser",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataUser"));
    }

    // create path and map variables
    String path = "/api/Reports/GetAllChartsDataUser".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));

    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CSApiResponseCombinedReportsData) ApiInvoker.deserialize(localVarResponse,  "", CSApiResponseCombinedReportsData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get trip by Id, for reporting purposes.  Requires the &#39;ReportAdmin&#39; permission.
  * 
   * @param tripId The ID of the Trip you want to get
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CSApiResponseTrip
  */
  public CSApiResponseTrip reportsGetOrgTripById (Integer tripId, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'tripId' is set
    if (tripId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tripId' when calling reportsGetOrgTripById",
        new ApiException(400, "Missing the required parameter 'tripId' when calling reportsGetOrgTripById"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrgTripById",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrgTripById"));
    }

    // create path and map variables
    String path = "/api/Reports/GetOrgTripById";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "TripId", tripId));
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CSApiResponseTrip) ApiInvoker.deserialize(localVarResponse, "", CSApiResponseTrip.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get trip by Id, for reporting purposes.  Requires the &#39;ReportAdmin&#39; permission.
   * 
   * @param tripId The ID of the Trip you want to get   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void reportsGetOrgTripById (Integer tripId, String xChronosheetsAuth, final Response.Listener<CSApiResponseTrip> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'tripId' is set
    if (tripId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tripId' when calling reportsGetOrgTripById",
        new ApiException(400, "Missing the required parameter 'tripId' when calling reportsGetOrgTripById"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrgTripById",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrgTripById"));
    }

    // create path and map variables
    String path = "/api/Reports/GetOrgTripById".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "TripId", tripId));

    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CSApiResponseTrip) ApiInvoker.deserialize(localVarResponse,  "", CSApiResponseTrip.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records.  Requires the &#39;ReportAdmin&#39; permission.
  * 
   * @param startDate The start date for the date range.  Report data in the response is after this date
   * @param endDate The end date for the date range.  Report data in the response is before this date
   * @param skip Skip this many items
   * @param take Take this many items
   * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment
  */
  public CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment reportsGetOrganisationTimesheetFileAttachments (Date startDate, Date endDate, Integer skip, Integer take, String userIds, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsGetOrganisationTimesheetFileAttachments",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsGetOrganisationTimesheetFileAttachments"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsGetOrganisationTimesheetFileAttachments",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsGetOrganisationTimesheetFileAttachments"));
    }
    // verify the required parameter 'skip' is set
    if (skip == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'skip' when calling reportsGetOrganisationTimesheetFileAttachments",
        new ApiException(400, "Missing the required parameter 'skip' when calling reportsGetOrganisationTimesheetFileAttachments"));
    }
    // verify the required parameter 'take' is set
    if (take == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'take' when calling reportsGetOrganisationTimesheetFileAttachments",
        new ApiException(400, "Missing the required parameter 'take' when calling reportsGetOrganisationTimesheetFileAttachments"));
    }
    // verify the required parameter 'userIds' is set
    if (userIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userIds' when calling reportsGetOrganisationTimesheetFileAttachments",
        new ApiException(400, "Missing the required parameter 'userIds' when calling reportsGetOrganisationTimesheetFileAttachments"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTimesheetFileAttachments",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTimesheetFileAttachments"));
    }

    // create path and map variables
    String path = "/api/Reports/GetOrganisationTimesheetFileAttachments";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Skip", skip));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Take", take));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "UserIds", userIds));
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment) ApiInvoker.deserialize(localVarResponse, "", CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records.  Requires the &#39;ReportAdmin&#39; permission.
   * 
   * @param startDate The start date for the date range.  Report data in the response is after this date   * @param endDate The end date for the date range.  Report data in the response is before this date   * @param skip Skip this many items   * @param take Take this many items   * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void reportsGetOrganisationTimesheetFileAttachments (Date startDate, Date endDate, Integer skip, Integer take, String userIds, String xChronosheetsAuth, final Response.Listener<CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsGetOrganisationTimesheetFileAttachments",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsGetOrganisationTimesheetFileAttachments"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsGetOrganisationTimesheetFileAttachments",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsGetOrganisationTimesheetFileAttachments"));
    }
    // verify the required parameter 'skip' is set
    if (skip == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'skip' when calling reportsGetOrganisationTimesheetFileAttachments",
        new ApiException(400, "Missing the required parameter 'skip' when calling reportsGetOrganisationTimesheetFileAttachments"));
    }
    // verify the required parameter 'take' is set
    if (take == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'take' when calling reportsGetOrganisationTimesheetFileAttachments",
        new ApiException(400, "Missing the required parameter 'take' when calling reportsGetOrganisationTimesheetFileAttachments"));
    }
    // verify the required parameter 'userIds' is set
    if (userIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userIds' when calling reportsGetOrganisationTimesheetFileAttachments",
        new ApiException(400, "Missing the required parameter 'userIds' when calling reportsGetOrganisationTimesheetFileAttachments"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTimesheetFileAttachments",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTimesheetFileAttachments"));
    }

    // create path and map variables
    String path = "/api/Reports/GetOrganisationTimesheetFileAttachments".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Skip", skip));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Take", take));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "UserIds", userIds));

    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment) ApiInvoker.deserialize(localVarResponse,  "", CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reports on Organisation trips (GPS tracking from whole organisation).  Requires the &#39;ReportAdmin&#39; permission.
  * 
   * @param startDate The start date for the date range.  Report data in the response is after this date
   * @param endDate The end date for the date range.  Report data in the response is before this date
   * @param skip Skip this many items
   * @param take Take this many items
   * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CSApiResponseForPaginatedListOrgReportTrip
  */
  public CSApiResponseForPaginatedListOrgReportTrip reportsGetOrganisationTrips (Date startDate, Date endDate, Integer skip, Integer take, String userIds, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsGetOrganisationTrips",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsGetOrganisationTrips"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsGetOrganisationTrips",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsGetOrganisationTrips"));
    }
    // verify the required parameter 'skip' is set
    if (skip == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'skip' when calling reportsGetOrganisationTrips",
        new ApiException(400, "Missing the required parameter 'skip' when calling reportsGetOrganisationTrips"));
    }
    // verify the required parameter 'take' is set
    if (take == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'take' when calling reportsGetOrganisationTrips",
        new ApiException(400, "Missing the required parameter 'take' when calling reportsGetOrganisationTrips"));
    }
    // verify the required parameter 'userIds' is set
    if (userIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userIds' when calling reportsGetOrganisationTrips",
        new ApiException(400, "Missing the required parameter 'userIds' when calling reportsGetOrganisationTrips"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTrips",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTrips"));
    }

    // create path and map variables
    String path = "/api/Reports/GetOrganisationTrips";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Skip", skip));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Take", take));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "UserIds", userIds));
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CSApiResponseForPaginatedListOrgReportTrip) ApiInvoker.deserialize(localVarResponse, "", CSApiResponseForPaginatedListOrgReportTrip.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reports on Organisation trips (GPS tracking from whole organisation).  Requires the &#39;ReportAdmin&#39; permission.
   * 
   * @param startDate The start date for the date range.  Report data in the response is after this date   * @param endDate The end date for the date range.  Report data in the response is before this date   * @param skip Skip this many items   * @param take Take this many items   * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void reportsGetOrganisationTrips (Date startDate, Date endDate, Integer skip, Integer take, String userIds, String xChronosheetsAuth, final Response.Listener<CSApiResponseForPaginatedListOrgReportTrip> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsGetOrganisationTrips",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsGetOrganisationTrips"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsGetOrganisationTrips",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsGetOrganisationTrips"));
    }
    // verify the required parameter 'skip' is set
    if (skip == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'skip' when calling reportsGetOrganisationTrips",
        new ApiException(400, "Missing the required parameter 'skip' when calling reportsGetOrganisationTrips"));
    }
    // verify the required parameter 'take' is set
    if (take == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'take' when calling reportsGetOrganisationTrips",
        new ApiException(400, "Missing the required parameter 'take' when calling reportsGetOrganisationTrips"));
    }
    // verify the required parameter 'userIds' is set
    if (userIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userIds' when calling reportsGetOrganisationTrips",
        new ApiException(400, "Missing the required parameter 'userIds' when calling reportsGetOrganisationTrips"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTrips",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTrips"));
    }

    // create path and map variables
    String path = "/api/Reports/GetOrganisationTrips".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Skip", skip));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Take", take));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "UserIds", userIds));

    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CSApiResponseForPaginatedListOrgReportTrip) ApiInvoker.deserialize(localVarResponse,  "", CSApiResponseForPaginatedListOrgReportTrip.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.  Requires the &#39;ReportAdmin&#39; permission.
  * 
   * @param startDate The start date for the date range.  Report data in the response is after this date
   * @param endDate The end date for the date range.  Report data in the response is before this date
   * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
   * @param sort Decide which column to sort on
   * @param order Decide which direction to sort the column
   * @param skip Skip this many rows
   * @param take Take this many rows
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CSApiResponseForPaginatedListRawReportItem
  */
  public CSApiResponseForPaginatedListRawReportItem reportsGetRawDataAdmin (Date startDate, Date endDate, String userIds, String sort, String order, Integer skip, Integer take, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'userIds' is set
    if (userIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userIds' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'userIds' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'sort' is set
    if (sort == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sort' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'sort' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'order' is set
    if (order == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'order' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'order' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'skip' is set
    if (skip == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'skip' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'skip' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'take' is set
    if (take == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'take' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'take' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsGetRawDataAdmin"));
    }

    // create path and map variables
    String path = "/api/Reports/GetRawDataAdmin";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "UserIds", userIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Sort", sort));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Skip", skip));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Take", take));
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CSApiResponseForPaginatedListRawReportItem) ApiInvoker.deserialize(localVarResponse, "", CSApiResponseForPaginatedListRawReportItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.  Requires the &#39;ReportAdmin&#39; permission.
   * 
   * @param startDate The start date for the date range.  Report data in the response is after this date   * @param endDate The end date for the date range.  Report data in the response is before this date   * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.   * @param sort Decide which column to sort on   * @param order Decide which direction to sort the column   * @param skip Skip this many rows   * @param take Take this many rows   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void reportsGetRawDataAdmin (Date startDate, Date endDate, String userIds, String sort, String order, Integer skip, Integer take, String xChronosheetsAuth, final Response.Listener<CSApiResponseForPaginatedListRawReportItem> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'userIds' is set
    if (userIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userIds' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'userIds' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'sort' is set
    if (sort == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sort' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'sort' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'order' is set
    if (order == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'order' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'order' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'skip' is set
    if (skip == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'skip' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'skip' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'take' is set
    if (take == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'take' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'take' when calling reportsGetRawDataAdmin"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetRawDataAdmin",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsGetRawDataAdmin"));
    }

    // create path and map variables
    String path = "/api/Reports/GetRawDataAdmin".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "UserIds", userIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Sort", sort));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Skip", skip));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Take", take));

    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CSApiResponseForPaginatedListRawReportItem) ApiInvoker.deserialize(localVarResponse,  "", CSApiResponseForPaginatedListRawReportItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets project cost estimations VS actual cost for date range and users.  Requires the &#39;ReportAdmin&#39; permission.
  * 
   * @param startDate The start date for the date range.  Report data in the response is after this date
   * @param endDate The end date for the date range.  Report data in the response is before this date
   * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CSApiResponseListProjectCostingReportItem
  */
  public CSApiResponseListProjectCostingReportItem reportsProjectCostingsAdmin (Date startDate, Date endDate, String userIds, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsProjectCostingsAdmin",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsProjectCostingsAdmin"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsProjectCostingsAdmin",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsProjectCostingsAdmin"));
    }
    // verify the required parameter 'userIds' is set
    if (userIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userIds' when calling reportsProjectCostingsAdmin",
        new ApiException(400, "Missing the required parameter 'userIds' when calling reportsProjectCostingsAdmin"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsProjectCostingsAdmin",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsProjectCostingsAdmin"));
    }

    // create path and map variables
    String path = "/api/Reports/ProjectCostingsAdmin";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "UserIds", userIds));
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CSApiResponseListProjectCostingReportItem) ApiInvoker.deserialize(localVarResponse, "", CSApiResponseListProjectCostingReportItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets project cost estimations VS actual cost for date range and users.  Requires the &#39;ReportAdmin&#39; permission.
   * 
   * @param startDate The start date for the date range.  Report data in the response is after this date   * @param endDate The end date for the date range.  Report data in the response is before this date   * @param userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void reportsProjectCostingsAdmin (Date startDate, Date endDate, String userIds, String xChronosheetsAuth, final Response.Listener<CSApiResponseListProjectCostingReportItem> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsProjectCostingsAdmin",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsProjectCostingsAdmin"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsProjectCostingsAdmin",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsProjectCostingsAdmin"));
    }
    // verify the required parameter 'userIds' is set
    if (userIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userIds' when calling reportsProjectCostingsAdmin",
        new ApiException(400, "Missing the required parameter 'userIds' when calling reportsProjectCostingsAdmin"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsProjectCostingsAdmin",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsProjectCostingsAdmin"));
    }

    // create path and map variables
    String path = "/api/Reports/ProjectCostingsAdmin".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "UserIds", userIds));

    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CSApiResponseListProjectCostingReportItem) ApiInvoker.deserialize(localVarResponse,  "", CSApiResponseListProjectCostingReportItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Timeseries jobs data for the logged in user.  Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;.
  * 
   * @param startDate The start date for the date range.  Report data in the response is after this date
   * @param endDate The end date for the date range.  Report data in the response is before this date
   * @param xChronosheetsAuth The ChronoSheets Auth Token
   * @return CSApiResponseListJobSeriesReportItem
  */
  public CSApiResponseListJobSeriesReportItem reportsUserJobsOverTime (Date startDate, Date endDate, String xChronosheetsAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsUserJobsOverTime",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsUserJobsOverTime"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsUserJobsOverTime",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsUserJobsOverTime"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsUserJobsOverTime",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsUserJobsOverTime"));
    }

    // create path and map variables
    String path = "/api/Reports/UserJobsOverTime";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));
    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CSApiResponseListJobSeriesReportItem) ApiInvoker.deserialize(localVarResponse, "", CSApiResponseListJobSeriesReportItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Timeseries jobs data for the logged in user.  Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;.
   * 
   * @param startDate The start date for the date range.  Report data in the response is after this date   * @param endDate The end date for the date range.  Report data in the response is before this date   * @param xChronosheetsAuth The ChronoSheets Auth Token
  */
  public void reportsUserJobsOverTime (Date startDate, Date endDate, String xChronosheetsAuth, final Response.Listener<CSApiResponseListJobSeriesReportItem> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling reportsUserJobsOverTime",
        new ApiException(400, "Missing the required parameter 'startDate' when calling reportsUserJobsOverTime"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling reportsUserJobsOverTime",
        new ApiException(400, "Missing the required parameter 'endDate' when calling reportsUserJobsOverTime"));
    }
    // verify the required parameter 'xChronosheetsAuth' is set
    if (xChronosheetsAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xChronosheetsAuth' when calling reportsUserJobsOverTime",
        new ApiException(400, "Missing the required parameter 'xChronosheetsAuth' when calling reportsUserJobsOverTime"));
    }

    // create path and map variables
    String path = "/api/Reports/UserJobsOverTime".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "StartDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "EndDate", endDate));

    headerParams.put("x-chronosheets-auth", ApiInvoker.parameterToString(xChronosheetsAuth));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CSApiResponseListJobSeriesReportItem) ApiInvoker.deserialize(localVarResponse,  "", CSApiResponseListJobSeriesReportItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
